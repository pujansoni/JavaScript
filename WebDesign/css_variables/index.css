/* This will point to the root of the document that it the html element and the variable will be available throughout the entire app. It's also known as global variable */

/* Variable declarations */

:root {
  --beige: #ffeead;
  --yellow: #ffcc5c;
  --red: #ff6f69;
}

.grid {
  --columns: 200px 200px;
}

/* Styles */

html,
body {
  background: var(--beige);
  color: var(--red);
}

h1,
p {
  color: var(--red);
}

/* Creating the local variable for particular section in html */
#navbar {
  --nav-red: #ff6f19;
}

/* Accessing the local --nav-red variable. This local variable is not available outside the navbar id */
#navbar a {
  color: var(--nav-red);
}

.grid {
  display: grid;
  grid-template-columns: var(--columns);
  grid-auto-rows: 140px;
  grid-gap: 20px;
  justify-content: center;
}

/* We can also override the CSS variable. Here note that all the elements that inherit the item class in the DOM also gets the updated red variable value. Here we are also creating a local --item-yellow variable */
.item {
  /* The --item-yellow variable is also available to the button as well as the button resides inside the item and has access to the local variables defined in the item */
  --item-yellow: #fffc5d;
  --red: #ff8e69;
  background: var(--item-yellow);
}

button {
  background: var(--red);
  color: var(--item-yellow);
}

.featured {
  /* Here in the featured class is targeted and we can make it stand out from the other items by overriding the value of the css variables so the corresponding html elements using this class uses these updated css variables */
  /* So for example the h1 element declared inside the featured class will use the updated red value defined here */
  --yello: #ffe55b;
  --red: #ff5564;
}

/* CSS variables resides in the DOM which means thate we can update those with the use of JavaScript as well */

@media all and (max-width: 550px) {
  /* Here we are reducing the columns to one when we minimize the screen */
  .grid {
    --columns: 200px;
  }

  :root {
    --beige: #fffeead;
  }
}
