.container {
  border: 5px solid #ffcc5c;
  /* Here when we use the flex option it will align the items horizontally by default going form left to right */
  /* A flexbox container always has a direction and by default this direction is horizontal i.e. the main axis which goes from left to right along the row. There's a cross axis which goes from top to bottom. We use CSS to position elements. We can make a flex container by using the property - display: flex */
  display: flex;
  /* We can also flip the direction of the flexbox container by setting up: flex-direction: column
  The default option is: flex-direction: row */
  /* flex-direction: column; */
  /* justify-content controls the content along the main axis. It can take a range of different values. By default it's set to flex-start i.e. the content is squeezed to the start of the main axis */
  /* justify-content: space-evenly; */
  /* Other justify-content values: flex-end center space-around space-between space-evenly */

  /* Here by giving the height 100% to the container we can make the height of the flex items responsive, but we need to make sure that the height of the <html> and the <body> element is also 100% */
  /* height: 100%; */
  /* The align-items controls the items in the cross axis */
  /* align-items: center; */
  /* Note: Flexbox are great for aligning the items to the center of the container. All we need to do is make sure both of the properties below are present:border:
  align-items: center;
  justify-content: center;
  */

  /* Note: If we have the height of the container 100% (as shown above) and we have justify-content set to flex-end(as shown below) the flex items will be at the bottom cause the main axis is Y in this case as the flex-direction is set to column. Now if we use align-items: flex-end it will push the item to the end of the cross axis i.e. X axis in this case */
  /* justify-content: flex-end;
  align-items: flex-end; */

  /* The flex-wrap: nowrap property is set by default which allows only one row or one column container along the main axis i.e. no matter the item swe have in our container they will all be accumulated to one row/one column. But if we change it to wrap and give each item the width(shown below) then if it doesn't have the room to fit the next item then it fits that item in the next line */
  /* flex-wrap: wrap; */
}

/* There are many cases where justify-content values won't work and we want to customize the position of each items in the flexbox container */
/* .logout {
  margin-left: auto;
} */
/* If we want both the search and the logout to be on the right we will target the search class as shown below */
/* .search {
  margin-left: auto;
} */

/* To grow and shrink all the items in the container to make it responsive we will target all the items as shown below */
/* If we were to remove the flex: 1 property on all the items then all the items will be fixed */
/* Flex is shorthand for three other properties i.e. flex-grow, flex-shrink, flex-basis */
/* .container > div {
  flex: 1;
} */

/* If we want the search div to be twice as large compare to the other items then we will target the search div and set the value of flex to 2. Here please note that directly accessing the .search class won't work as using the container and selecing the search class is more specific and that's how CSS works */
/* .container > .search {
  flex: 2;
} */

/* We can also target individual items on the cross axis as given below */
/* .logout {
  align-self: flex-start;
}
.home {
  align-self: flex-end;
} */

/* We can also wrap each items in the flex box as given below */
/* .container > div {
  width: 300px;
} */

/* As mentinoed before, flex is shorthand for three other properties i.e. flex-grow, flex-shrink, flex-basis */
.home {
  /* flex: 1; */
  /* Here flex: 1 is also shorthand for - flex: 1 1 0 i.e. flex-grow: 1; flex-shrink: 1; flex-basis: 0; */
  /* flex-grow decides how much of the extra space should be distributed to the various items */
  flex-grow: 0;
  /* flex-shrink: 1;  */
  /* flex-basis is the way of setting the base width of the element */
  flex-basis: 200px;
}

.logout {
  /* Here the logout will take all the remaining space. If we set flex-grow on both home and logout to zero then we have space remaining. If we have home flex-grow: 1 and logout flex-grow: 2 then the flex-grow logout will grow twice as fast compare to the home */
  flex-grow: 1;
  flex-basis: 200px;
}
